// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// ProductController is an autogenerated mock type for the ProductController type
type ProductController struct {
	mock.Mock
}

type ProductController_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductController) EXPECT() *ProductController_Expecter {
	return &ProductController_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: c
func (_m *ProductController) CreateProduct(c *gin.Context) {
	_m.Called(c)
}

// ProductController_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type ProductController_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ProductController_Expecter) CreateProduct(c interface{}) *ProductController_CreateProduct_Call {
	return &ProductController_CreateProduct_Call{Call: _e.mock.On("CreateProduct", c)}
}

func (_c *ProductController_CreateProduct_Call) Run(run func(c *gin.Context)) *ProductController_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ProductController_CreateProduct_Call) Return() *ProductController_CreateProduct_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProductController_CreateProduct_Call) RunAndReturn(run func(*gin.Context)) *ProductController_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: c
func (_m *ProductController) DeleteProduct(c *gin.Context) {
	_m.Called(c)
}

// ProductController_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type ProductController_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ProductController_Expecter) DeleteProduct(c interface{}) *ProductController_DeleteProduct_Call {
	return &ProductController_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", c)}
}

func (_c *ProductController_DeleteProduct_Call) Run(run func(c *gin.Context)) *ProductController_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ProductController_DeleteProduct_Call) Return() *ProductController_DeleteProduct_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProductController_DeleteProduct_Call) RunAndReturn(run func(*gin.Context)) *ProductController_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function with given fields: c
func (_m *ProductController) GetProduct(c *gin.Context) {
	_m.Called(c)
}

// ProductController_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type ProductController_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ProductController_Expecter) GetProduct(c interface{}) *ProductController_GetProduct_Call {
	return &ProductController_GetProduct_Call{Call: _e.mock.On("GetProduct", c)}
}

func (_c *ProductController_GetProduct_Call) Run(run func(c *gin.Context)) *ProductController_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ProductController_GetProduct_Call) Return() *ProductController_GetProduct_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProductController_GetProduct_Call) RunAndReturn(run func(*gin.Context)) *ProductController_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function with given fields: c
func (_m *ProductController) ListProducts(c *gin.Context) {
	_m.Called(c)
}

// ProductController_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type ProductController_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ProductController_Expecter) ListProducts(c interface{}) *ProductController_ListProducts_Call {
	return &ProductController_ListProducts_Call{Call: _e.mock.On("ListProducts", c)}
}

func (_c *ProductController_ListProducts_Call) Run(run func(c *gin.Context)) *ProductController_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ProductController_ListProducts_Call) Return() *ProductController_ListProducts_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProductController_ListProducts_Call) RunAndReturn(run func(*gin.Context)) *ProductController_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// PatchProduct provides a mock function with given fields: c
func (_m *ProductController) PatchProduct(c *gin.Context) {
	_m.Called(c)
}

// ProductController_PatchProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchProduct'
type ProductController_PatchProduct_Call struct {
	*mock.Call
}

// PatchProduct is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ProductController_Expecter) PatchProduct(c interface{}) *ProductController_PatchProduct_Call {
	return &ProductController_PatchProduct_Call{Call: _e.mock.On("PatchProduct", c)}
}

func (_c *ProductController_PatchProduct_Call) Run(run func(c *gin.Context)) *ProductController_PatchProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ProductController_PatchProduct_Call) Return() *ProductController_PatchProduct_Call {
	_c.Call.Return()
	return _c
}

func (_c *ProductController_PatchProduct_Call) RunAndReturn(run func(*gin.Context)) *ProductController_PatchProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductController creates a new instance of ProductController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductController(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductController {
	mock := &ProductController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
