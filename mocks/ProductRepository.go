// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "payhere/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

type ProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductRepository) EXPECT() *ProductRepository_Expecter {
	return &ProductRepository_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *ProductRepository) CreateProduct(ctx context.Context, product domain.Product) (int, error) {
	ret := _m.Called(ctx, product)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) (int, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) int); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type ProductRepository_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - product domain.Product
func (_e *ProductRepository_Expecter) CreateProduct(ctx interface{}, product interface{}) *ProductRepository_CreateProduct_Call {
	return &ProductRepository_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, product)}
}

func (_c *ProductRepository_CreateProduct_Call) Run(run func(ctx context.Context, product domain.Product)) *ProductRepository_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Product))
	})
	return _c
}

func (_c *ProductRepository_CreateProduct_Call) Return(_a0 int, _a1 error) *ProductRepository_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_CreateProduct_Call) RunAndReturn(run func(context.Context, domain.Product) (int, error)) *ProductRepository_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: ctx, productID
func (_m *ProductRepository) DeleteProduct(ctx context.Context, productID int) error {
	ret := _m.Called(ctx, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type ProductRepository_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int
func (_e *ProductRepository_Expecter) DeleteProduct(ctx interface{}, productID interface{}) *ProductRepository_DeleteProduct_Call {
	return &ProductRepository_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, productID)}
}

func (_c *ProductRepository_DeleteProduct_Call) Run(run func(ctx context.Context, productID int)) *ProductRepository_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ProductRepository_DeleteProduct_Call) Return(_a0 error) *ProductRepository_DeleteProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_DeleteProduct_Call) RunAndReturn(run func(context.Context, int) error) *ProductRepository_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function with given fields: ctx, productID
func (_m *ProductRepository) GetProduct(ctx context.Context, productID int) (*domain.Product, error) {
	ret := _m.Called(ctx, productID)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Product, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type ProductRepository_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int
func (_e *ProductRepository_Expecter) GetProduct(ctx interface{}, productID interface{}) *ProductRepository_GetProduct_Call {
	return &ProductRepository_GetProduct_Call{Call: _e.mock.On("GetProduct", ctx, productID)}
}

func (_c *ProductRepository_GetProduct_Call) Run(run func(ctx context.Context, productID int)) *ProductRepository_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ProductRepository_GetProduct_Call) Return(_a0 *domain.Product, _a1 error) *ProductRepository_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_GetProduct_Call) RunAndReturn(run func(context.Context, int) (*domain.Product, error)) *ProductRepository_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function with given fields: ctx
func (_m *ProductRepository) ListProducts(ctx context.Context) ([]domain.Product, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type ProductRepository_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProductRepository_Expecter) ListProducts(ctx interface{}) *ProductRepository_ListProducts_Call {
	return &ProductRepository_ListProducts_Call{Call: _e.mock.On("ListProducts", ctx)}
}

func (_c *ProductRepository_ListProducts_Call) Run(run func(ctx context.Context)) *ProductRepository_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProductRepository_ListProducts_Call) Return(_a0 []domain.Product, _a1 error) *ProductRepository_ListProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_ListProducts_Call) RunAndReturn(run func(context.Context) ([]domain.Product, error)) *ProductRepository_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: ctx, product
func (_m *ProductRepository) UpdateProduct(ctx context.Context, product domain.Product) error {
	ret := _m.Called(ctx, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type ProductRepository_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - product domain.Product
func (_e *ProductRepository_Expecter) UpdateProduct(ctx interface{}, product interface{}) *ProductRepository_UpdateProduct_Call {
	return &ProductRepository_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, product)}
}

func (_c *ProductRepository_UpdateProduct_Call) Run(run func(ctx context.Context, product domain.Product)) *ProductRepository_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Product))
	})
	return _c
}

func (_c *ProductRepository_UpdateProduct_Call) Return(_a0 error) *ProductRepository_UpdateProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_UpdateProduct_Call) RunAndReturn(run func(context.Context, domain.Product) error) *ProductRepository_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
