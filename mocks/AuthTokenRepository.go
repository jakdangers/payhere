// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "payhere/domain"

	mock "github.com/stretchr/testify/mock"
)

// AuthTokenRepository is an autogenerated mock type for the AuthTokenRepository type
type AuthTokenRepository struct {
	mock.Mock
}

type AuthTokenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthTokenRepository) EXPECT() *AuthTokenRepository_Expecter {
	return &AuthTokenRepository_Expecter{mock: &_m.Mock}
}

// FindAuthTokenByUserIDAndJwtToken provides a mock function with given fields: ctx, params
func (_m *AuthTokenRepository) FindAuthTokenByUserIDAndJwtToken(ctx context.Context, params domain.FindByUserIDAndJwtTokenParams) (domain.AuthToken, error) {
	ret := _m.Called(ctx, params)

	var r0 domain.AuthToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.FindByUserIDAndJwtTokenParams) (domain.AuthToken, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.FindByUserIDAndJwtTokenParams) domain.AuthToken); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(domain.AuthToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.FindByUserIDAndJwtTokenParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAuthTokenByUserIDAndJwtToken'
type AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call struct {
	*mock.Call
}

// FindAuthTokenByUserIDAndJwtToken is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.FindByUserIDAndJwtTokenParams
func (_e *AuthTokenRepository_Expecter) FindAuthTokenByUserIDAndJwtToken(ctx interface{}, params interface{}) *AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call {
	return &AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call{Call: _e.mock.On("FindAuthTokenByUserIDAndJwtToken", ctx, params)}
}

func (_c *AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call) Run(run func(ctx context.Context, params domain.FindByUserIDAndJwtTokenParams)) *AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.FindByUserIDAndJwtTokenParams))
	})
	return _c
}

func (_c *AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call) Return(_a0 domain.AuthToken, _a1 error) *AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call) RunAndReturn(run func(context.Context, domain.FindByUserIDAndJwtTokenParams) (domain.AuthToken, error)) *AuthTokenRepository_FindAuthTokenByUserIDAndJwtToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthTokenRepository creates a new instance of AuthTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthTokenRepository {
	mock := &AuthTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
