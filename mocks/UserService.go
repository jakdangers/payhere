// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "payhere/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, req
func (_m *UserService) CreateUser(ctx context.Context, req domain.CreateUserRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateUserRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.CreateUserRequest
func (_e *UserService_Expecter) CreateUser(ctx interface{}, req interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, req)}
}

func (_c *UserService_CreateUser_Call) Run(run func(ctx context.Context, req domain.CreateUserRequest)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateUserRequest))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(_a0 error) *UserService_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_CreateUser_Call) RunAndReturn(run func(context.Context, domain.CreateUserRequest) error) *UserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
